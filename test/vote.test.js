const { describe, it, before } = require('mocha')
const { expect } = require('chai')
const request = require('supertest')
const code = require('../src/lib/code')
const config = require('config')

describe('vote test', () => {
  it('need auth test', async () => {
    const res = await request('http://localhost:3000')
      .post('/election/vote')
      .send({ candidates: [ 3, 4 ] })
      .set('Accept', 'application/json')
      .expect('Content-Type', /json/)
      .expect(200)
    expect(res.body).to.have.property('code')
    expect(res.body.code).to.equal(code.UNAYTHORIZED)
  })
  it('real time get candidates', async () => {
    let res = await request('http://localhost:3000')
      .get('/election/votes')
      .send({ start: '2019-04-27 17:00:00', end: '2019-03-28 17:00:00' })
      .set('Accept', 'application/json')
      .set('fake-token', config.get('fakeToken'))
      .expect('Content-Type', /json/)
      .expect(200)
    expect(res.body).to.have.property('code')
    expect(res.body.code).to.equal(code.SUCCESS)
    expect(res.body).to.have.property('data')
    expect(res.body.data).to.be.a('array')
  })
  describe('after login', () => {
    let token
    before(async () => {
      let res = await request('http://localhost:3000')
        .post('/user/login')
        .send({ email: 'pascal_lin@foxmail.com', password: '123456' })
        .set('Accept', 'application/json')
        .expect('Content-Type', /json/)
        .expect(200)
      expect(res.body).to.have.property('data')
      expect(res.body.data).to.have.property('token')
      expect(res.body.data.token).to.be.a('string')
      token = res.body.data.token
    })
    it('candidate number minimize limit', async () => {
      let res = await request('http://localhost:3000')
        .post('/election/vote')
        .set('x-api-key', token)
        .send({ candidates: [ 2 ] })
        .set('Accept', 'application/json')
        .expect('Content-Type', /json/)
        .expect(200)
      expect(res.body).to.have.property('code')
      expect(res.body.code).to.equal(code.VOTE_LIMIT)
    })
    it('candidate number maxmiaze limit', async () => {
      let res = await request('http://localhost:3000')
        .post('/election/vote')
        .set('x-api-key', token)
        .send({ candidates: [ 2, 3, 4, 5, 6 ] })
        .set('Accept', 'application/json')
        .expect('Content-Type', /json/)
        .expect(200)
      expect(res.body).to.have.property('code')
      expect(res.body.code).to.equal(code.VOTE_LIMIT)
    })
    // it('election time limit', async () => {
    //   let res = await request('http://localhost:3000')
    //     .post('/election/vote')
    //     .set('x-api-key', token)
    //     .send({ candidates: [ 2, 3, 4, 5 ] })
    //     .set('Accept', 'application/json')
    //     .expect('Content-Type', /json/)
    //     .expect(200)
    //   expect(res.body).to.have.property('code')
    //   expect(res.body.code).to.equal(code.ELECTION_TIME_LIMIT)
    // })
    it('election vote should be success now', async () => {
      let res = await request('http://localhost:3000')
        .post('/election/vote')
        .set('x-api-key', token)
        .send({ candidates: [ 1, 2, 3, 4 ] })
        .set('Accept', 'application/json')
        .expect('Content-Type', /json/)
        .expect(200)
      expect(res.body).to.have.property('code')
      // expect(res.body.code).to.equal(code.SUCCESS)
      // expect(res.body.code).to.equal(code.HAVE_BEEN_VOTE)
    })
  })
})
